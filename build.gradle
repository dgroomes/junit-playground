plugins {
    id "java"
    id "application"
}

ext {
    slf4jVersion = "1.7.26"
    junitJupiterVersion = "5.6.0"
    junitPlatformVersion = "1.6.0"
}

repositories {
    mavenLocal()
    jcenter()
}

configurations {
    junitLauncher
}

if (project.hasProperty("TARGET_JAVA_16")) {
    project.getLogger().quiet("Configuring to compile with Java 16 and execute with Java 16")
    java {
        /**
         * This is how to configure the Java compilation task to use Java 16.
         */
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
    }

    def java16Home = System.getenv("JAVA_16_HOME")
    if (java16Home == null || java16Home.isBlank()) {
        throw new IllegalArgumentException("JAVA_16_HOME environment variable must be set to the path of JDK16 but was not set")
    }

    def java16HomeFile = new File(java16Home)
    if (!java16HomeFile.isDirectory()) {
        throw new IllegalArgumentException("JAVA_16_HOME environment variable must be set to the path of JDK16 but was not a real directory: $java16Home")
    }

    /**
     * Configure the compiler step to accommodate Java 16 by forking a javac process using JDK 16 instead of the Java
     * that is running the Gradle process.
     */
    tasks.withType(JavaCompile) {
        options.fork = true
        options.forkOptions.javaHome = java16HomeFile
        options.compilerArgs += ["--enable-preview"]
    }

    tasks.run {
        setExecutable("$java16Home/bin/java")
        jvmArgs = ["--enable-preview"]
    }

    tasks.test {
        setExecutable("$java16Home/bin/java")
        jvmArgs = ["--enable-preview"]
    }
}

/**
 * Print the path to the standalone JUnit Console Launcher JAR so it can be used later by "test.sh" to execute the JUnit
 * tests. It's great to leverage Gradle for managing dependencies and setting up environment information for a
 * downstream process like "test.sh"
 */
task printJunitLauncherPath() {
    doLast {
        configurations.junitLauncher.resolve().each {
            new File(buildDir, "junit-launcher-path.txt").text = "$it"
        }
    }
}

/**
 * Support the standalone JUnit Console Launcher by printing the test class path to a file. This task is used in
 * conjunction with 'printJunitLauncherPath'.
 */
task printTestClassPath() {
    doLast {
        def classpath = sourceSets.test.runtimeClasspath.join(":")
        new File(buildDir, "test-classpath.txt").text = "$classpath"
    }
}

dependencies {
    junitLauncher "org.junit.platform:junit-platform-console-standalone:$junitPlatformVersion"

    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.slf4j:slf4j-simple:$slf4jVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
}

application {
    mainClassName = "dgroomes.Main"
}

test {
    useJUnitPlatform()

    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
}
